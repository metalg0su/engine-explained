@startuml
!pragma teoz true

' ----- Definition
participant "Leader" as leader
collections "Nodes" as nodes

' ----- Relations
==Start Loop!==
activate leader
loop Consensus Loop
...
note over leader
    - last_unconfirmed_block: N-1
    - candidate_block: N
end note


note over leader #FFFFAA
    - Complained last round?
    - New term in last_unconfirmed_block?
end note

leader -> leader: **makeup_block**: Build candidate_block builder
alt has last_unconfirmed_block?
    leader -> leader: **add_block**: add last_unconfirmed_block to DB
end

leader -> leader: **score_invoke**: with (N, N-1)
leader -->o nodes: **AnnounceUnconfirmedBlock**: broadcast candidate_block
& leader -->o]

note over leader #FFFFAA
    **N is now N-1**: set candidate_block as last_unconfirmed_block
end note
leader -->o nodes: **VoteUnconfirmedBlock**: Self voting of candidate_block then broadcast the vote.
& leader -->o]

...Waiting for votes...

'================================================================================
==Global Overview==
par AnnounceUnconfirmedBlock
leader -->o nodes: candidate_block
note over nodes #FFFFAA
    As a Leader, this is candidate_block
    As a Node, this is unconfirmed_block
end note

activate nodes #aaafff
nodes -> nodes: verify_confirm_info (prev_vote)
nodes -> nodes: Transition state to **Vote**

nodes -> nodes: **add_unconfirmed_block**
note over nodes
    - verify the block then confirm prev block by votes of current block
    - verify votes then vote to block
end note

leader o<-- nodes
& nodes -->o]: **VoteUnconfirmedBlock**: broadcast my vote

deactivate leader
deactivate nodes

'---------------------------------------------------------------------
else VoteUnconfirmedBlock
leader -->o nodes: vote from the others
& nodes o<--]
end

==Restart Loop!==
end
@enduml