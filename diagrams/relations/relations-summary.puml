@startuml

'legend
'    |= Color |= Type |= Description |
'    | <size:11><back:#Crimson>           </back></size>|    <&arrow-right> | Example 1 |
'    | <size:11><back:#LightSeaGreen>           </back></size>|    <&arrow-right> | Example 2 |
'    | <size:11><back:#DarkGreen>           </back></size>|    <&arrow-right> | Example 3 |
'    | <size:11><back:#YellowGreen>           </back></size>|    <&box> | Example 4 |
'    | <size:11><back:#Chocolate>           </back></size>|    <&box> | Example 5 |
'endlegend

'===== ===== DIAGRAM ===== =====

title Relationship Between Components

' Other stuffs
actor Iconist as user
note top: Http Request!

() gRPC
() rabbitMQ << Singleton Stub >>

database blockDB <<levelDB\n key: value storage>>

' Breakfast?
package REST {
    collections RestService << Gateway of API call >> #ffaaaa

    control Listener as worker << Gunicorn >>
    [Web Server] as server << Sanic >>

    RestService .down. worker
    RestService .down. server

    user -right-> worker: Entry Point\n (api/v3/...)
    worker -right-> server : route
}

' Peer
package PEER {
    collections PeerService <<Defines Peer Type>> #aaffaa
    PeerService --( rabbitMQ

    () PeerInnerService << Provides Peer-related info? >>
    () PeerOuterService <<gRPC>>
    note right: Handling Requests\n from other peers
    PeerOuterService -[hidden]r- PeerInnerService

    PeerOuterService -right-> PeerService
    PeerInnerService -[dotted]u- PeerService: get channel info?

}
    [Other Peer] --( PeerOuterService

' Channel
package CHANNEL {
        collections ChannelService << Channel Layer >> #aaaaff
        rabbitMQ -- ChannelService
        PeerInnerService )-left- ChannelService
        [TimerService] <<State-related>>

        ' ChannelInnerService
        [ChannelInnerService] << Receives gRPC Request >>
        [ChannelInnerService] -[hidden]r- [PeerManager]
        ChannelService <-[bold]up- [ChannelInnerService]

        ' TxInnerServices
        () "Tx\nReciever" as txRec
        () "Tx\nCreater" as txCre
        server -( txCre: Dispatch
        txCre --[hidden]left-- txRec
        [ChannelInnerService] -up- txCre: create_icx_tx
        [ChannelInnerService] -up- txRec

        ' PeerManager
        [PeerManager] <<Provides Other Peers' data>>
        ChannelService -up- [PeerManager]
'        [PeerListData] <<peer_info,\n complant rule,\n ... >>
'        [PeerManager] -up- [PeerListData]

        ' Broadcast
        [BroadcastScheduler] <<Broadcast Tx\n to Other Peers>>
        ChannelService -right- [BroadcastScheduler]
        [BroadcastScheduler] .up. [TimerService]: check broadcast time

        ' Broadcast Queues
'        database "Broadscheduler\nQueue" as BS_q
'        database "stored_tx" as tx_q
'        BS_q -[hidden]r- tx_q
'        [BroadcastScheduler] -up- BS_q: put commands\n to plan schedule
'        [BroadcastScheduler] -up- tx_q: put Tx\n before send

        ' BlockManager
        [BlockManager] <<Oversees Block Data>>
        ChannelService -[bold]down- [BlockManager]

        [Epoch] << Round-related >>
        [Epoch] -[hidden]r- [BlockGenerationScheduler]
        [BlockManager] .down. [Epoch]
        [BlockManager] .down. [BlockGenerationScheduler]

        [BlockChain] <<Manipulate\n Confirmed Block>>
        [BlockManager] -right- [BlockChain]
        [BlockChain] -right- blockDB: store confirmed block

        ' BlockManager Queues
'        database txQueue as BM_q <<AgingCache:\n Block Timestamp>>
'        database "unconfirmedBlock\nQueue" as u_q
'        database "CandidateBlocks" as candidate
'
'        [BlockManager] -- BM_q
'        [BlockManager] -- u_q: Stored Undefined block
'        [BlockManager] -- candidate: Stored Next block
}

@enduml

