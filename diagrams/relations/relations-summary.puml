@startuml
skinparam linetype polyline

'legend
'    |= Color |= Type |= Description |
'    | <size:11><back:#Crimson>           </back></size>|    <&arrow-right> | Example 1 |
'    | <size:11><back:#LightSeaGreen>           </back></size>|    <&arrow-right> | Example 2 |
'    | <size:11><back:#DarkGreen>           </back></size>|    <&arrow-right> | Example 3 |
'    | <size:11><back:#YellowGreen>           </back></size>|    <&box> | Example 4 |
'    | <size:11><back:#Chocolate>           </back></size>|    <&box> | Example 5 |
'endlegend

'===== ===== DIAGRAM ===== =====

actor Iconist as user
() gRPC
' Breakfast?
package {
    [RestService]

    control Listener as worker << Gunicorn >>
    [Web Server] as server << Sanic >>

    [RestService] -down- worker
    user -right-> worker: Entry Point\n (api/v3/...)
    worker -right-> server : route
    server -( gRPC: Dispatch
}

' Other stuffs
database blockDB <<levelDB\n key: value storage>>
() rabbitMQ

' Peer
package {
    [PeerService] <<Defines Peer Type>>
    rabbitMQ )-down- [PeerService]

    [PeerInnerService] << Provides Peer-related info? >>
    [PeerService] .down. [PeerInnerService]: get channel info?
    [PeerOuterService] <<Handling Outside Requests>>
    [PeerService] <-down- [PeerOuterService]
    gRPC )- [PeerOuterService]
}

' Channel
package {
        rabbitMQ )-down- [ChannelService]: get channel detail
        [ChannelService]
        [TimerService] <<State-related>>
        [ChannelService] -down- [TimerService]

        ' ChannelInnerService
        frame {
            [ChannelInnerService] << Dispatches\n to the Others>>
            [ChannelService] <-down- [ChannelInnerService]

            () ChannelTxReciever as txRec
            () ChannelTxCreater as txCre

            txRec -[hidden]right- txCre
            [ChannelInnerService] -down- txRec
            [ChannelInnerService] -- txCre: create_icx_tx
        }

        ' PeerManager
        frame {
            [PeerManager] <<Provide Other Peers' info>>
            [ChannelService] -down- [PeerManager]
            [PeerListData] <<peer_info,\n complant rule,\n ... >>
            [PeerManager] -down- [PeerListData]
        }

        ' Broadcast
        frame {
            [BroadcastScheduler] <<Broadcast Tx\n to other peers>>
            [ChannelService] -- [BroadcastScheduler]
            [TimerService] .right. [BroadcastScheduler]: check broadcast time

            database "Broadscheduler\nQueue" as BS_q
            database "stored_tx" as tx_q
            BS_q -[hidden]r- tx_q
            [BroadcastScheduler] -down- BS_q: put commands\n to plan schedule
            [BroadcastScheduler] -down- tx_q: put Tx\n before send
        }

        ' BlockManager
        frame {
            [BlockManager] <<Controls Block>>
            [ChannelService] -down- [BlockManager]

            [Epoch] << Round-related >>
            [BlockManager] .left. [Epoch]
            [BlockManager] .right. [BlockGenerationScheduler]

            database txQueue as BM_q <<AgingCache:\n Block Timestamp>>
            database "unconfirmedBlock\nQueue" as u_q
            database "CandidateBlocks" as candidate

            [BlockManager] -- BM_q
            [BlockManager] -- u_q: Stored Undefined block
            [BlockManager] -- candidate: Stored Next block

            [BlockChain] <<Confirmed Block>>
            [BlockManager] -- [BlockChain]
            [BlockChain] -- blockDB: store confirmed block

        }


}

'' connections
'[PeerService] -right-( () ChannelInnerStub
'() ChannelInnerStub -- [ChannelInnerService]
'[PeerService] --( () ChannelTxRecieverStub
'() ChannelTxRecieverStub -down- [ChannelTxReciever]



'PeerService --( () IconScoreStub

'() ChannelServiceStub
'package {
'    ChannelServiceStub -down- [ChannelService]
'        frame {
'            ChannelService - [BlockManager]
''            [txQueue] #Yellow
''            [unconfirmedBlockQueue] #Yellow
''            [BlockChain]
''            [BlockVersioner]
''            [TransactionVersioner]
''            [BlockGenerationScheduler]
''            [BlockGenerationScheduler-Queue] #Yellow
'        }
'
''        () ChannelTxCreatorStub - [ChannelTxCreator]
''        () ChannelTxReceiverStub - [ChannelTxReceiver]
''
''        [ChannelStateMachine]
''        [TimerService]
'    }


'        frame {
'            control TransactionSerializer
'            control TransactionVerifier
'        }


''
'        frame "BroadcastScheduler" {
'            [BroadcastScheduler_Queue] #Yellow
'            [storedTx_Queue] #Yellow
'
'
'        }


'() IconScoreStub
'package {
'    frame {
'        [IconServiceEngine]
'}

@enduml

