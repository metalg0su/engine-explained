@startuml

'legend
'    |= Color |= Type |= Description |
'    | <size:11><back:#Crimson>           </back></size>|    <&arrow-right> | Example 1 |
'    | <size:11><back:#LightSeaGreen>           </back></size>|    <&arrow-right> | Example 2 |
'    | <size:11><back:#DarkGreen>           </back></size>|    <&arrow-right> | Example 3 |
'    | <size:11><back:#YellowGreen>           </back></size>|    <&box> | Example 4 |
'    | <size:11><back:#Chocolate>           </back></size>|    <&box> | Example 5 |
'endlegend

actor Iconist as user

package "RestService" {
    user -right-> [Gunicorn]
    [Gunicorn] -down-> [Sanic]
    [Sanic] -down-> [Dispatcher]
}

' Peer
() PeerStub
package {
    [PeerService]
    PeerStub -down- [PeerService]
    [PeerService] -down- [PeerInnerService]
    [PeerService] -down- [PeerOuterService]
}

' Channel
package {
        [PeerStub] )-down- [ChannelService]: get channel detail
        [ChannelService]
        [ChannelService] -down- [TimerService]

        ' ChannelInnerService
        frame {
            [ChannelService] -down- [ChnnelInnerService]
            [ChnnelInnerService] -left- [ChannelTxReciever]
            [ChnnelInnerService] -down- [ChannelTxCreater]
        }

        ' PeerManager
        frame {
            [ChannelService] -down- [PeerManager]
            [PeerManager] -down- [PeerListData]
        }

        ' Broadcast
        frame {
            [BroadcastScheduler]

            [ChannelService] -down- [BroadcastScheduler]
            [TimerService] .right. [BroadcastScheduler]: check broadcast time\n and broadcast to peers

            database "Broadscheduler\nQueue" as BS_q
            database "stored_tx" as tx_q
            [BroadcastScheduler] -down- BS_q: put commands\n to plan schedule
            [BroadcastScheduler] -down- tx_q: put Tx\n before send
        }

        ' BlockManager
        frame {
            [ChannelService] -down- [BlockManager]
        }


}

'' connections
[PeerService] -right-( () ChannelInnerStub
() ChannelInnerStub -- [ChnnelInnerService]
[PeerService] --( () ChannelTxRecieverStub
() ChannelTxRecieverStub -down- [ChannelTxReciever]


'database levelDB

'PeerService --( () IconScoreStub

'() ChannelServiceStub
'package {
'    ChannelServiceStub -down- [ChannelService]
'        frame {
'            ChannelService - [BlockManager]
''            [txQueue] #Yellow
''            [unconfirmedBlockQueue] #Yellow
''            [BlockChain]
''            [BlockVersioner]
''            [TransactionVersioner]
''            [BlockGenerationScheduler]
''            [BlockGenerationScheduler-Queue] #Yellow
'        }
'
''        () ChannelTxCreatorStub - [ChannelTxCreator]
''        () ChannelTxReceiverStub - [ChannelTxReceiver]
''
''        [ChannelStateMachine]
''        [TimerService]
'    }


'        frame {
'            control TransactionSerializer
'            control TransactionVerifier
'        }


''
'        frame "BroadcastScheduler" {
'            [BroadcastScheduler_Queue] #Yellow
'            [storedTx_Queue] #Yellow
'
'
'        }


() IconScoreStub
package {
    frame {
        [IconServiceEngine]
}

'' ====================
'' ==  RELATIONSHIP  ==
'' ====================
''
'Iconist --> Gunicorn: Entry point (../api/v3/)
'Dispatcher --> IconScoreStub: validation_transaction
'IconScoreStub --> IconServiceEngine: some links
'Dispatcher <-- IconScoreStub: response_to_json_query
'
'Dispatcher --> ChannelTxCreatorStub: create_icx_tx
'ChannelTxCreator --> TransactionSerializer: serialize with tx_version
'ChannelTxCreator <-- TransactionSerializer: return Transaction Object
'ChannelTxCreator --> TransactionVerifier: give Tx Object and verify it
'' + pre_validate Tx...
'ChannelTxCreator --> BroadcastScheduler: comm: CREATE_TX
'Dispatcher <-- ChannelTxCreatorStub: response tx_hash with status code.
'
'Iconist <-- Gunicorn: response json result..
'
''------------------------------------------
'
'BroadcastScheduler --> BroadcastScheduler_Queue: schedule Broadcast order
'BroadcastScheduler --> storedTx_Queue: put tx_item
'BroadcastScheduler --> gRPC: send Tx to Peer subscribed?
'gRPC --> PeerStub
'
''Rest
'RestService - PeerService
'RestService - ChannelService
'RestService - ChannelTxCreator
'RestService - IconScoreService
'
'' PeerService
'PeerService -up- levelDB
'PeerInnerService -up- CommonService
'PeerOuterService -up- CommonService
'PeerService - ChannelService
'
'CommonService - gRPC
'CommonService - rabbitMQ
'
'' ChannelService
'ChannelService - PeerInnerService
'ChannelService - BlockManager
'ChannelService - BroadcastScheduler
'ChannelService - TimerService
'' ChannelService - NodeSubscriber
'ChannelService - ChannelInnerService
'ChannelService - ChannelStateMachine
'
'
'BlockManager - levelDB
'BlockManager - txQueue
'BlockManager - unconfirmedBlockQueue
'BlockManager - BlockChain
'BlockManager - BlockGenerationScheduler
'
'BlockGenerationScheduler - BlockGenerationScheduler_Queue
'
'' ChannelInnerService - rabbitMQ
'ChannelInnerService - TransactionVersioner
'ChannelInnerService - BroadcastScheduler
'ChannelInnerService - ChannelTxCreator
'ChannelInnerService - ChannelTxReceiver
'
'PeerManager - ChannelService
'PeerManager - PeerListData
'
'BlockChain - BlockVersioner
'BlockChain - TransactionVersioner
'BlockChain - levelDB
'
'BroadcastScheduler - TimerService
'BroadcastScheduler - PeerOuterService
'

@enduml

