@startuml
skinparam style strictuml

create RadioStation
-> RadioStation : start (outside of Peer)
activate RadioStation
-> PeerService : init
activate PeerService
activate InnerService
activate OuterService
-> PeerService : serve

create InnerServices
PeerService -> InnerServices : run
note left InnerServices
(InnerServices)
RestService
ScoreService
TxService
end note

PeerService -> CommonService : init
activate CommonService
create inner_server
CommonService --> inner_server : server
create outer_server
CommonService --> outer_server : server
create BroadcastProcess
CommonService -> BroadcastProcess : run
activate BroadcastProcess

create PeerManager
PeerService --> PeerManager : load from db
create BlockManager
PeerService --> BlockManager
PeerService -> RadioStation : connect
PeerService --> PeerManager : load from RS (if is response)

PeerService -> PeerService : set type leader (if)
note right
(if)
first peer
on network.
end note

PeerService -> PeerService : block height sync (if not leader)

PeerService -> CommonService : set peer type
PeerService -> BlockManager : set peer type (if leader)
BlockManager -> BlockManager : set consensus algorithm

PeerService -> OuterService : start
PeerService -> InnerService : start
PeerService -> BlockManager : start
PeerService -> CommonService : start
PeerService -> CommonService : subscribe (to RS)
CommonService -> RadioStation : subscribe
RadioStation -> PeerService : announce new peer (to other peers)
create TxProcess
PeerService -> TxProcess : run
note left TxProcess
same code of BroadcastProcess
end note
PeerService -> PeerService : subscribe (to leader)
PeerService -> PeerService : announce new leader (if leader) to All Peer and RS
PeerService -> SendToProcess : start

PeerService -> PeerService : wait

PeerService -> SendToProcess : stop
PeerService -> PeerService : stop ScoreService
PeerService -> PeerService : stop RestService
PeerService -> PeerService : stop TxService
PeerService -> TxProcess : stop
@enduml

#### 개선 포인트
 * broadcast 가 audience (peer 들의 target 정보) 를 가져야 하는데 broadcast 시작 후에 RS 에 connect 하게 되어 있다.
 * 처음 Radio Station 연결시 PeerList를 가져오고 Init 완료후 RadioStation에 자신을 등록
  -> Subscribe to RS 타이밍에 자기를 RS 의 peer 목록에 추가하도록 수정 하였음 (LOOP-160)
  -> peer 의 connect to rs 에서는 상태를 unknown 으로 추가하고 Subscribe 후
     connect 로 변경하면서 announceNewPeer 메시지를 broadcast 한다.
 * OuterService는 모든 초기화가 끝난 다음에 동작해야 하기 때문에 현재 서비스의 상태를 알려주는 flag를 두자.
   아니면 OuterService를 시작하는 함수를 맨 아래로 두자.

